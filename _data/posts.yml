'2015-07-21':
  text: >
    This post is for those who work using SOA or other kind of distributed architecture.
    The biggest challenge for developers when working with this kind of architecture is to make development process as easy as possible. To achieve this goal there are a lot of tools but in this post I will show how to do that with [Tmux][t] and [Tmuxinator][tr]. 
    <br />
    <br />
    Requirements: `Mac OSX (~> 10.10.3), Brew (~> 0.9.5), Ruby (~> 2.2.2)`
    <br />
    Install Tmux: `brew install tmux`
    <br />
    Install Tmuxinator: `gem install tmuxinator`
    <br />
    Create tmuxinator project: [gist][g1]
    <br />
    Connect bash to tmux: download tmuxinator.bash [here][tb] and put it in `~/.bin` directory.
    <br />
    Add this to your `~/.bash_profile`: `source ~/.bin/tmuxinator.bash`
    <br />
    Run your project: `mux project_name`
    <br />
    <br />
    Now you have all your setup accessible via one bash command.
  hrefs:
    t: https://tmux.github.io
    tr: https://github.com/tmuxinator/tmuxinator
    g1: https://gist.github.com/e5f5c06b69a09bf6b3fc
    tb: https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.bash

'2015-07-22':
  text: >
    <p>
      To be honest, last time I worked on a project based on SOA (Service Oriented Architecture) was a few years ago, but I think it's a good idea to share my 
      experience with it. There are a lot of advantages of SOA but for me these three are the most important: scaling, speed and decoupling.
    </p>
    <h2>Scaling</h2>
    <p>
       Scaling comes into play when your traffic grows. If you have monolithic application you can scale all of it independently of the parts that have high traffic.
       But this way is not efficient as unused parts of the project will eat your resources while scaling.
    </p>
    <p>SOA helps to scale only the needed parts of your project and keep the system efficient.</p>
    <h2>Speed</h2>
    <p>
       Small modular resources, optimized for particular role in a system, helps to achieve speed of accessing that resources and creates value by saving your customers 
       time. You need statistics? Create a service on top of MongoDB. Need to work with bank transactions? Create a service on top of RDBMS.</p>
    <h2>Decoupling</h2>
    <p>
       In general, decoupling is a good practice at any level of development. No one wants to work in a mess. It also serves very well when it comes to distributed 
       teams as you can control access of your services and divide development work to external teams without worrying that someone access not permitted data or code.
    </p>

'2015-07-24':
  text: >
    From the first days of my career as a programmer, I was using sophisticated and heavy tools for writing code. Actually, the first editor I tried was 
    [Adobe Dreamweaver][ad]. It's still alive and does its job quite well I suppose. Later on [TextMate][tm] which is one of my favorites code writing tools.
    A few months ago I tried [Atom][a] which is pretty nice too and comes with not so laggy text search as TextMate's.
    But this post is important not because of this story but because I've found a setup that makes me happy.
    
    <h2>Operating System</h2>
    <p>Let's be honest, the majority of medium experienced web developers like Mac OS X. I like it too. It's simple, beautiful for eye and is Unix family member.</p>
    <h2>Editor</h2>
    <p>Like mentioned in the intro, editor is the key for hapiness.</p>
    <p>
      Sometimes I catch myself thinking that web developer is a weak programmer. It's like a challenge and honor thing for each programmer to do as much cool stuff 
      as possible. However, I believe that there is a trade-off between cool stuff and the value you're really creating. To make it clear: not always cool stuff 
      creates more value.
    </p>
    But this post is about fun. Fun is to do something cool. Cool is something simple and easy. If you're a developer, probably you'd agree that the simpliest but 
    maybe not easiest editor is [Vim][v].
    When using Vim you use only keyboard to write, navigate and do other cool stuff. No mouse or trackpad clicking, just pure sound of your keyboard.
    As I'm a Ruby developer, [here's][s] the setup of Vim for rubyists on Mac OS X.
    
    <h2>Workflow</h2>
    Sometimes developers tend to overcomplicate things. This is why I like Ruby, although, it has it's own drawbacks too. Anyway, while writing any kind of code,
    it is important how do you manage your codebase and navigate across files while working.

    <p>Someone would say, just install some plugins to Vim and forget it. But this is not so efficient. Sounds weird but that's my opinion.</p>
    <p>If you need to switch among files a lot of times while working, that means that you're not following TDD/BDD and doing things with inertia, hurrying.</p>
    Good code takes time to write and think. Good naming helps to save time while connecting various bits of code and if you do this correctly, this kind of coding 
    starts to make sense.
    For code versioning I use [Git][g], editor - Vim, for file previewing, in case you need quickly look at some other than current Vim opened file - [Highlight][h]. 
    All these components are in separate Terminal tabs to make easier to navigate among those.
    
    <h2>Highlight</h2>
    <p>Sometimes while working on complicated part of application you need to view other files quickly. For this purpose I use Highlight.</p>

    Install Highlight: `brew install highlight`
    <br />
    Add alias to your `~/.bash_profile`: `alias c='highlight -O ansi -l'`
    <br />
    Usage: `c path/to/filename`

    <h2>Sum up</h2>
    <p>Although this works for me and helps to follow TDD/BDD practices, every developer has his/her own preferences. Happy coding!</p>
  hrefs:
    ad: http://www.adobe.com/products/dreamweaver.html
    tm: https://macromates.com
    a: https://atom.io
    v: http://www.vim.org
    s: https://gist.github.com/e4b526dffc109ab5384c
    g: https://git-scm.com
    h: http://www.andre-simon.de
  
'2015-10-04':
  text: >
    After installing [Tmux][t] I felt a bit confused. There is just plain "man" style documentation. I like things simple and explained clearly for a tool that is used by someone for the first time. Well that's not a big deal, I just needed to get deeper into the text and here is what I've found.
    
    <h2>Commands</h2>
    
    The first thing which was not clear to me was the switching among windows. To make that happen you need to use commands. Actually, that was not working at the beginning as I was missing `~./bin/tmuxinator.bash` file. Anyway, after some time I managed to figure out how to enter commands, switch among windows, split windows etc. To enter a command you need to use `Ctrl + b` and enter the command's character. [Here][h] is the list of commands.
    
    <h2>Sum up</h2>
    
    A bit pitty that there is no straight shortcuts like in Vim, but Tmux is still a handy tool for making things easier.
  hrefs:
    t: https://tmux.github.io
    h: 
'2015-08-02':
  text: >
    When working with Ruby together with team on a project, everyone should follow the same code standards to avoid mess and achieve better development speed. Usually, Ruby developers follow common rules and try to avoid rare operators, expressions and so on. But sometimes it's fun to play, explore and use variuos exotic Ruby capabilities to make development more interesting. 
    
    <h2>Standards</h2>
    
    <p>
      Usually, standards are pretty simple when it comes to editor configuration. 2 space soft tabs, tidy indentation and new line at the end of a file.
    </p>
      Proper code styling is a bit more sophisticated part. There are a lot of style guides that could be used by companies but I choose [Thoughbot][t] which is quite nice. If needed, of course, it can be adjusted by forking the repo.
    
    <p>
      Although it's good to follow standards, Ruby has a lot of power for fun.
    </p>

    <h2>Operators</h2>
   
    <p>
      If you're reading this blog, you should understand what are operators about and how to use them. Ruby has a lot of operators that can work independently among variuos kind of objects but in this blog post I'll mention just some interesting operators and use cases that could be used to have fun.
    </p> 

    <h3>*</h3>
    [Array#join][j] is a method for joining elements (String) to a row separated by the given argument. Example of usage:
    <br /><br /> 
    ```
    irb(main):001:0> ['a', 'b', 'c'].join(',')
    ```
    <br />
    ```
    => "a,b,c"
    ```
 
    <p>
      Shortcut <strong>*</strong> makes the syntax more fun:
    </p>
    ```
    irb(main):002:0> ['a', 'b', 'c'] * ','
    ```
    <br />
    ```=> "a,b,c"
    ```

    <h3>%</h3>
    [Numeric#modulo][m] is a math function which is very useful for arrays iterations when needed to insert something periodically into output.
    <br />
    Example:
    <br /> 
    ```irb(main):001:0> 22.modulo(10)```
    <br />
    ```=> 2```
   
    <p>
      Shortcut:
    </p>
    
    ```irb(main):002:0> 22 % 10```
    <br /> 
    ```=> 2```
  hrefs:
    m: http://ruby-doc.org/core-2.2.2/Numeric.html#method-i-modulo
    j: http://ruby-doc.org/core-2.2.2/Array.html#method-i-join
    t: https://github.com/thoughtbot/guides/tree/master/style/ruby 
'2015-08-05':
  text: >
    When starting to build a SOA (Service Oriented Architecture) project, sometimes it's hard to choose the right tools for it. 
    My first SOA project where I had a chance to participate was started a few years ago. 
    At that time there was no ready for production out-of-box solution for this kind of Ruby based systems. 
    Well, that was not a big problem for our team because we just builded the solution from scratch by ourselves.

    <h2>Blueprint</h2>

    The goal for our team was to create distributed, isolated and fast working architecture with capabilities for quick expansion. 
    It was needed to outsource some parts of the project for external teams, so the security was one of the main priorities.
    To achieve that, we needed to create something like [OAuth 1.0][o]. 
    It's a simple protocol which works very nicely when implementing together with concurrent requests for multiple resources fetching.
      
    <p>
     The schema below shows simplified version of the principle how it works.
    </p>

    <img src="/assets/img/soa-schema1.png" />

    <p>
      <strong>(1)</strong> - Before fetching resources (Service 1) must connect to Auth service and ask if it has permissions to operate on the Service 2.
      If it has, Auth provides authentication token to use for limited amount of time (30 mins etc) and, using that token <strong>(2)</strong>,
      Service 1 is able to connect to Service 2 and operate on the resources.
    </p> 

    <h2>Database structure</h2>
    The main architecture's structure is kept in Auth service as it decides about services communication security.
      
    <p>
     The fields in Auth <strong>clients</strong> table were these: <em>client_id, service_id, scope</em>.
     One more table was needed for the temporary access tokens, let's call it <strong>tokens</strong>: 
     <em>
       client_id (table's <strong>clients</strong> id), token, created_at
     </em>.
    </p>

    <h2>Client gem</h2>
       
    To make things faster and ease the communication among services including Auth gateway, we created a gem (not available as opensource anymore). 
    It includes caching of temporary tokens, concurrent HTTPS requests ([Typhoeus][t]) 
    and nice API for configuration of the services.

    <h2>Try yourself</h2>

    These days the situation is a bit different. I'm sure there are a lot of nice gems that could be combined together to achieve the same purpose.
    But before getting on this work, please read carefully about <a href="" target="_blank">[SOA][s]</a>
    and decide if it's a good choice for your project. Don't hesitate to use my proposed solution because it's pretty simple and you make sure that you know
    100% how your system works by doing the system from scratch.
  hrefs:
    o: http://oauth.net/core/1.0
    s: https://en.wikipedia.org/wiki/Service-oriented_architecture
    t: https://github.com/typhoeus/typhoeus
'2015-08-06':
  text: >
    Nowadays, there are a lot of hosting providers that offer variuos service packages in variuos regions. To be honest, it's a hard topic because the decision which hosting provider to choose very depends on business factors. Let's try to review some use cases and hosting providers.

    <h2>Small business / e-commerce shop</h2>
    
    Small electronic shops or representative webpages don't need to be placed on sophisticated hosting platforms. I'd recommend to choose <a href="https://en.wikipedia.org/wiki/Solid-state_drive" target="_blank">SSD</a> (storage) hosting for faster <a href="https://en.wikipedia.org/wiki/Input/output" target="_blank">I/O</a> and a hosting provider in the region where your business operate.
    
    <h2>Medium size / big e-commerce shops / PaaS / SaaS</h2>
    
    For such kind of projects, recommendation is to use <a href="https://en.wikipedia.org/wiki/Cloud_computing">Cloud-computing</a> or more specifically <a href="https://en.wikipedia.org/wiki/Platform_as_a_service" target="_blank">PaaS</a>. Some examples of such services: <a href="https://www.heroku.com" target="_blank">Heroku</a>, <a href="https://aws.amazon.com" target="_blank">AWS</a>, <a href="http://www.rackspace.com" target="_blank">RackSpace</a>.
    
    <h2>Projects with high security need</h2>
    
    If there is a project with very high security and uptime need, better place your own server somewhere in data center with the <a href="https://en.wikipedia.org/wiki/Service-level_agreement" target="_blank">SLA</a> which is acceptable for your business. Unfortunatelly, such cloud computing services as AWS or PaaS like Heroku (based on AWS cloud) sometimes is not stable 100% of the time, so please consider this option for very high SLA level.

    <h2>Some hosting providers</h2>
    
    Some providers that worth of trust: <a href="https://www.linode.com" target="_blank">Linode</a>, <a href="http://www.peer1.com" target="_blank">Peer1</a>, <a href="https://www.tilaa.com" target="_blank">Tilaa</a>. Before choosing any plan for hosting of any these, please read carefully SLAs and do not hesitate to search for a data center with your own separate server if your business has high security requirements.

    <h2>AWS</h2>
    
    Personally I like AWS because it offers space for creativity when it comes to sophisticated and distributed systems. If you are interested in creating something cool, big and fun, try it out. It comes with Database (<a href="https://aws.amazon.com/rds" target="_blank">RDS</a>), Caching (<a href="https://aws.amazon.com/elasticache/" target="_blank">ElastiCache</a>), Computing Cloud (<a href="https://aws.amazon.com/ec2" target="_blank">EC2</a>) and much more. Connecting all that parts gives a lot of fun!
  hrefs:
    
'2015-08-07':
  text: >
    If you're familiar with <a href="" target="_blank">Heroku</a>, you know how it's easy to manage deployments. Simple push to a <a href="" target="_blank">Git</a> repo and your deployment is in process. With <a href="" target="_blank">AWS</a> it's a bit different. This blog post will introduce you with simple way of creating similar homemade tool for easy deployments. Important to mention that AWS is much cheaper than Heroku. 

    <h2>Concepts</h2>
    <strong>AWS</strong> is a tool designed to give as much space for dynamic resources manipulation as possible. This allows developers to create products designed for exact business needs and avoid waste.
    
    <p>
      <strong>EC2</strong> is a service that allows developers to operate on cloud computing resources (create EC2 instances and put there your application to be accessible from outside). 
    </p>
    <p>
      <strong>RDS</strong> is a service that allows to create data store instances.
    </p>
    <p>
      <strong>CloudFormation</strong> is a tool that connects all AWS services and allows to create / edit / delete instances of specified services. In simple words, it allows to create necessary EC2 / RDS / ElastiCache instances for application by one take and later modify that if needed.
    </p>

    <h2>Blueprint</h2>
    
    The scheme below shows how the deployment PaaS works. It's pretty straightforward but needs some Ruby based implementation tools to create all the stack easily.
    <br /><br />
    <img src="/assets/img/deployment-paas1.png" />
    <br /><br />
      <strong>(1)</strong> - you hit the EC2 instance which is responsible for deploys (connected to a small RDS for deployment related data) via HTTPS with parameters which application to deploy. The PaaS contains CloudFormation scripts for each application. In this case, the deployment request is made for <strong>application 2</strong> which has a RDS instance attached, so when the request comes from your local machine to PaaS, it chooses CloudFormation script specific for the chosen application and starts deployment <strong>(2)</strong>. 
    <p>
     As you can see, <strong>application 1</strong> has no RDS instance attached, therefore it has a different CloudFormation script and is ready to be deployed if PaaS gets a request to do that.
    </p>

    <h2>Implementation</h2>
    
    <p>
      There are some handy tools writen in Ruby to make this scheme working, but default <a href="https://aws.amazon.com/cli" target="_blank">AWS CLI</a> tools are also needed.
    </p>
    <p>
     Please check out <a href="https://github.com/ThoughtWorksStudios/eb_deployer" target="_blank">EB deployer</a> which helps to create application stacks using <a href="http://aws.amazon.com/elasticbeanstalk" target="_blank">Elastic Beanstalk</a> and supports CloudFormation scripts to operate on multiple types of AWS services.
    </p>
    <p>
      The main implementation happens in the PaaS as it will store all the configuration details for each application and just give commands to ElasticBeanstalk and CloudFormation services to create stacks for each application.
    </p>

    <h2>Some ideas</h2>
    When you will have the initial version of this PaaS working, you can add to it whatever you want: HTTPS based logs, DB backups, periodical events (deploys, db backups), more advanced HTTPS API for making the service more easy to use. Unfortunatelly, the current version of this PaaS that I have access to is not ready for production, so please do it by yourself, share and maybe one day we'll merge our ideas to make this open source for everyone. Cheers!
  hrefs:
    
'2015-08-08':
  text: >
    <a href="https://aws.amazon.com/elasticbeanstalk"  target="_blank">Elastic Beanstalk</a> is a AWS service which helps to ease deployments of applications. Often we need to deploy applications without downtime and have failover which is always ready to be used to make sure the system stays operational all the time. Elastic Beanstalk is exactly designed for this purpose. This blog post will review the main features of this service and help you to get better understanding of robust and easy deployments with AWS.

    <h2>Deployment strategies</h2>
    
    Elastic Beanstalk supports multiple deployment strategies, load balancing and all other cool stuff that allows you to forget about details that is not very important for your product development.
    
    <h3>In place deployment</h3>
    In place deployment is a bit risky strategy of EB. It's fast from that perspective, that you work only with one EB instance but started deployment is running while your production environment is online. This is not too bad for low load having applications but if your product has high traffic, it may occur some unexpected errors and you won't have failover to manage the accident.
    
    <h3>Blue Green deployment</h3>
    This strategy is better for high-medium traffic having applications. The principle is simple: you have two EB instances and when performing a deploy, one of those is still active (with all EC2 instances). After deployment has been done, the instances' CNAMEs are switched and the deployed version of application goes live.

    <h2>Deployment security</h2>
   
      When performing deploys, in EB instance settings you can define HTTP(S) check URL. It is recommended to use it to make sure your deployed EB instance is responsive from outside. In this way EB core determines if deployed EB instance is available for the switch (Blue Green) or just available (In place).
    <p>
      If something bads happen, Blue Green deploy has the advantage of failover and ability to switch the EB instances manually by using AWS interface or CLI. In theory, if application has been built correctly, this should never happen.
    </p>
    
    <h2>Final word</h2>
      To be honest, I like Elastic Beanstalk for its simplicity and capabilities. If you're starting to build something standard, you should choose it together with the <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html" target="_blank">supported development platforms</a>. For more advanced systems with more sophisticated purposes, please consider using <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html" target="_blank">Amazon Machine Images (AMI)</a> which allows to build your custom EC2 instances and of course use for scaling like Elastic Beanstalk.

  hrefs:
    
'2015-08-11':
  text: >
    <a href='https://aws.amazon.com/rds' target='_blank'>AWS RDS</a> is a service for data store. It has a lot of cool features, like periodic data server snapshots, monitoring, a lot of security options and so on. The problem with it comes out when you need to switch to a different provider or do some data migration for a specific database in an instance. Currently this feature is not supported natively, so this blog post is about how to make a work around. If you need a simple DB backup from your RDS instance, please keep reading.
    
    <h2>Blueprint</h2>
    
    <ol>
      <li>From your application console, rake task or application gem hits the RDS instance to create a clone of it.</li>
      <li>The duplicate of the instance starts to be created, it takes some time depending on your RDS instance size, type etc.</li>
      <li>After the temporary RDS instance is created, the application fetches a chosen database to localhost (mysqldump, pg_dump etc.) and uploads it to a <a href='https://aws.amazon.com/s3' target='_blank'>S3</a> bucket where it is protected by S3 security policies.</li>
      <li>Now your local machine or any kind of other server can fetch the DB backup from S3.</li>
    </ol>
    
    <p>
      After the DB backup creation process completes, the temporary RDS instance is shutdown to save the cost of the operation.
    </p>
   
     <h2>The gem</h2>
      Somewhere on the internet this kind of work around has already been described but it's just a pure list of bash commands. To make things easier, I've created a Ruby <a href='https://github.com/kurbaitis/rds_db_backup' target='_blank'>gem</a> which is currently at beta version stage so please don't hesitate to fork it and send pull requests.

  hrefs:
    
'2015-08-23':
  text: >
    <a href="https://digitalocean.com" target="_blank">DigitalOcean</a> is a cloud computing service which has amazingly beautiful API for all resources administration.

    <h2>Structure</h2>
      The service has a lot of cool features, but I'll mention just two the most important ones for me: Droplets (server instances) and Images (inactive server stacks for scaling).
    
    <p>
      <strong>Droplets</strong> - is a service for server instances, it allows to create instances based on some predefined stacks that is very handy for creating specialized instances for data store, caching or load balancing etc. It also supports multiple regions to make your application faster for clients.<br />
      <strong>Images</strong> - is a service for creating "templates" based on created Droplets. These created stacks that can contain your own modifications are useful for scaling your application.
    </p>
    
    <h2>The gem</h2>

    There is <a href="https://github.com/rmoriz/knife-digital_ocean" target="_blank">a Ruby gem</a> for the API but it works only using console so I modified it to be used directly from Ruby interface. It's not perfect due to the lack of time so please consider forking and improving it. Please check it out <a href="https://github.com/kurbaitis/knife-digital_ocean" target="_blank">here</a>.

  hrefs:
    
